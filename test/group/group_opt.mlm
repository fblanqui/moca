(**********************************************************************)
(*                                                                    *)
(*                           Moca                                     *)
(*                                                                    *)
(*          Pierre Weis, INRIA Rocquencourt                           *)
(*          Frédéric Blanqui, projet Protheo, INRIA Lorraine          *)
(*                                                                    *)
(*  Copyright 2005-2007,                                              *)
(*  Institut National de Recherche en Informatique et en Automatique. *)
(*  All rights reserved.                                              *)
(*                                                                    *)
(*  This file is distributed under the terms of the Q Public License. *)
(*                                                                    *)
(**********************************************************************)

(* $Id: group_opt.mlm,v 1.2 2007-04-25 14:46:13 weis Exp $ *)

(* Abelian additive group structure: the group is not trivial since we have
   generators that are not neutral elements.

   The cannonical representants could be combs of Add (One, ...).
   We optimize their representation using additional constructors and
   rules.

   This example demonstrates the use of a lot of user defined rewrite rules and
   the need to help the programmer to complete them (in the Knuth-Be ndix's
   completion algorithm sense)! *)

type t = private
   | D_0
   | D_1
   | D_2
   | D_4
   | Opp of t
   | Add of t * t
   begin
     associative
     commutative
     neutral (D_0)
     opposite (Opp)

     (* Rules to produce D_i constructors. *)
     rule Add (D_1, D_1) -> D_2
     rule Add (D_1, Add (D_1, x)) -> Add (D_2, x)

     rule Add (D_1, Opp D_2) -> Opp D_1
     rule Add (D_1, Add (Opp D_2, x)) -> Add (Opp D_1, x)
     rule Add (D_1, Opp D_4) -> Opp (Add (D_2, D_1))
     rule Add (D_1, Add (Opp D_4, x)) -> Add (Opp (Add (D_2, D_1)), x)

     rule Add (Opp D_1, D_2) -> D_1
     rule Add (Opp D_1, D_4) -> Add (D_2, D_1)

     rule Add (D_2, D_2) -> D_4
     rule Add (D_2, Add (D_2, x)) -> Add (D_4, x)

     rule Add (D_2, Opp D_1) -> D_1
     rule Add (D_2, Add (Opp D_1, x)) -> Add (x, D_1)

     rule Add (D_2, Opp D_4) -> Opp D_2
     rule Add (D_2, Add (Opp D_4, x)) -> Add (x, Opp D_2)

     rule Add (Opp D_2, D_1) -> Opp D_1
     rule Add (Opp D_2, Add (D_1, x)) -> Add (Opp D_1, x)
     rule Add (Opp D_2, D_4) -> D_2
     rule Add (Opp D_2, Add (D_4, x)) -> Add (D_2, x)

     (* Rules to compute Add (D_4, Opp D_i). *)
     rule Add (D_4, Opp D_1) -> Add (D_2, D_1)
     rule Add (D_4, Add (Opp D_1, x)) -> Add (Add (D_2, D_1), x)

     rule Add (D_4, Opp D_2) -> D_2
     rule Add (D_4, Add (Opp D_2, x)) -> Add (D_2, x)

     rule Add (Opp D_4, D_1) -> Opp (Add (D_2, D_1))
     rule Add (Opp D_4, Add (D_1, x)) -> Add (Opp (Add (D_2, D_1)), x)
     rule Add (Opp D_4, D_2) -> Opp D_2
     rule Add (Opp D_4, Add (D_2, x)) -> Add (Opp D_2, x)

   end
;;
