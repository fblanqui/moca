(**********************************************************************)
(*                                                                    *)
(*                           Moca                                     *)
(*                                                                    *)
(*          Pierre Weis, INRIA Rocquencourt                           *)
(*          Frédéric Blanqui, projet Protheo, INRIA Lorraine          *)
(*                                                                    *)
(*  Copyright 2005-2008,                                              *)
(*  Institut National de Recherche en Informatique et en Automatique. *)
(*  All rights reserved.                                              *)
(*                                                                    *)
(*  This file is distributed under the terms of the Q Public License. *)
(*                                                                    *)
(**********************************************************************)

(* $Id: skiv.mlm,v 1.1 2008-02-21 13:56:13 bonichon Exp $ *)

(* Defining Combinatory Logic:
   Constructors are S, K, and I (subtituting application, constant
   function generator, and identity).
   We also add an App constructor to modelize application.
   Then, semantics definitions of S, K, I are given using rules that
   define their behavior when applied to arguments. For instance:
     rule App (I, x) -> x
   defines the I combinator. *)
type nski = private
   | Nvar of string
   | Ns
   | Nk
   | Ni
   | Napp of nski * nski
   begin
    (* Defining I *)
    rule Napp (Ni, x) -> x
    (* Defining K *)
    rule Napp (Napp (Nk, x), y) -> x
    (* Defining S *)
    rule Napp (Napp (Ns, Nk), x) -> Ni
    rule Napp (Napp (Napp (Ns, x), y), z) -> Napp (Napp (x, z), (Napp (y, z)))
   end;;
