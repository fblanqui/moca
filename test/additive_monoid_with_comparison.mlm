(**********************************************************************)
(*                                                                    *)
(*                           Moca                                     *)
(*                                                                    *)
(*          Pierre Weis, INRIA Rocquencourt                           *)
(*          Frédéric Blanqui, projet Protheo, INRIA Lorraine          *)
(*                                                                    *)
(*  Copyright 2005-2008,                                              *)
(*  Institut National de Recherche en Informatique et en Automatique. *)
(*  All rights reserved.                                              *)
(*                                                                    *)
(*  This file is distributed under the terms of the Q Public License. *)
(*                                                                    *)
(**********************************************************************)

(* $Id: additive_monoid_with_comparison.mlm,v 1.1 2008-04-11 21:50:50 weis Exp $ *)

(* Non trivial additive monoid.

   The code generated by Moca for this file is simple enough
   to be the first one proven in Coq :)
*)
type monoid = private
   | Zero
     begin
       let eq = 0
       and lt = -1
       and gt = 1
       ;;

       let rec compare x y =
         match x, y with
         | Zero, Zero -> eq
         | Zero, _ -> lt
         | One, One -> eq
         | One, Zero -> gt
         | Add (x, y), Add (z, t) ->
             let c = compare x z in
             if c = eq then compare y t else c
         | Add (_, _), _ -> gt
         | _, Add (_, _) -> lt
       ;;
     end
   | One
   | Add of monoid * monoid
     begin
       commutative
       associative
       neutral (Zero)
     end
;;
