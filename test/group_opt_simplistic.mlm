(**********************************************************************)
(*                                                                    *)
(*                           Moca                                     *)
(*                                                                    *)
(*          Pierre Weis, INRIA Rocquencourt                           *)
(*          Frédéric Blanqui, projet Protheo, INRIA Lorraine          *)
(*                                                                    *)
(*  Copyright 2005-2007,                                              *)
(*  Institut National de Recherche en Informatique et en Automatique. *)
(*  All rights reserved.                                              *)
(*                                                                    *)
(*  This file is distributed under the terms of the Q Public License. *)
(*                                                                    *)
(**********************************************************************)

(* $Id: group_opt_simplistic.mlm,v 1.3 2008-03-30 22:41:58 weis Exp $ *)

(* Abelian group structure: the group is not trivial since we have generators
   that are not neutral elements.
   The cannonical representants could be combs of Add (One, ...).
   We optimize their representation using additional constructors and
   rules.
   This group is isomorphic to the additive group of integers, which each
   integer n represented as the sum 8q + r, with q and r such that
   n = 8q + r and r < 8:
   - 8q is represented as successive additions of 8,
   - r is represented as one constant constructor or the sum of one two or
   three constant constructors. *)

type t = private
   | D_0
   | D_1
   | D_2
   | D_4
   | D_8
   | Opp of t
   | Add of t * t
   begin
     associative
     commutative
     neutral (D_0)
     opposite (Opp)

     (* Rules to produce D_i constructors. *)
     rule Add (D_1, D_1) -> D_2
     rule Add (D_2, D_2) -> D_4
     rule Add (D_4, D_4) -> D_8

     (* Rules to compute Add (D_2, Opp D_i). *)
     rule Add (D_2, Opp D_1) -> D_1
     rule Add (D_2, Opp D_4) -> Opp D_2
     rule Add (D_2, Opp D_8) -> Opp (Add (D_4, D_2))

     (* Rules to compute Add (D_4, Opp D_i). *)
     rule Add (D_4, Opp D_1) -> Add (D_2, D_1)
     rule Add (D_4, Opp D_2) -> D_2
     rule Add (D_4, Opp D_8) -> Opp (D_4)

     (* Rules to compute Add (D_8, Opp D_i). *)
     rule Add (D_8, Opp D_1) -> Add (D_4, Add (D_2, D_1))
     rule Add (D_8, Opp D_2) -> Add (D_4, D_2)
     rule Add (D_8, Opp D_4) -> D_4
   end
;;
