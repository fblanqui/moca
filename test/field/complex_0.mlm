(**********************************************************************)
(*                                                                    *)
(*                           Moca                                     *)
(*                                                                    *)
(*          Pierre Weis, INRIA Rocquencourt                           *)
(*          Frédéric Blanqui, projet Protheo, INRIA Lorraine          *)
(*                                                                    *)
(*  Copyright 2005-2008,                                              *)
(*  Institut National de Recherche en Informatique et en Automatique. *)
(*  All rights reserved.                                              *)
(*                                                                    *)
(*  This file is distributed under the terms of the Q Public License. *)
(*                                                                    *)
(**********************************************************************)

(* $Id: complex_0.mlm,v 1.1 2011-06-21 18:42:43 weis Exp $ *)

(* Complex structure according to the mathematical definition. *)

type complex = private
   | Zero
   begin
     let rec compare c1 c2 =
       match c1, c2 with
       | Mulext (_, c1), Mulext (_, c2) -> compare c1 c2
       | c1, c2 -> Pervasives.compare c1 c2
     ;;
   end
   | One
   | I
   | Opp of complex
     begin
       rule Opp (Mulext (f1, c1)) -> Mulext (-. f1, c1)
     end
   | Inv of complex
     begin
       rule Inv (Mulext (f1, c1)) -> Mulext (f1, Inv c1)
     end
(*
     This rule is now generated by the compiler.
     begin
       rule Inv (Opp x) -> Opp (Inv x)
     end
*)
   | Mulext of float * complex
     begin
       rule Mulext (0.0, _) -> Zero
       rule Mulext (1.0, c) -> c
       rule Mulext (_f1, Zero) -> Zero
       rule Mulext (f1, Opp c) -> Mulext (-. f1, c)
(*       rule Mulext (f1, Inv c) -> Inv (Mulext (1.0 /. f1, c))*)
       rule Mulext (f1, Mulext (f2, c)) -> Mulext (f1 *. f2, c)
       rule Mulext (f1, Add (c1, c2)) -> Add (Mulext (f1, c1), Mulext (f1, c2))
(*       rule Mulext (f1, Mul (c1, c2)) -> Mul (Mulext (f1, c1), c2)*)
     end
   | Add of complex * complex
     begin
       associative
       commutative (compare)
       neutral (Zero)
       opposite (Opp)

       rule Add (c1, Mulext (f1, c2)) when c1 = c2 ->
            Mulext (1.0 +. f1, c1)
       rule Add (Mulext (f1, c1), c2) when c1 = c2 ->
            Mulext (1.0 +. f1, c1)
       rule Add (Mulext (f1, c1), Mulext (f2, c2)) when c1 = c2 ->
            Mulext (f1 +. f2, c1)
       rule Add (Mulext (f1, c1), Add (Mulext (f2, c2), c3)) when c1 = c2 ->
            Add (Mulext (f1 +. f2, c1), c3)
       rule Add (c1, Add (Mulext (f2, c2), c3)) when c1 = c2 ->
            Add (Mulext (1.0 +. f2, c1), c3)
       rule Add (Mulext (f1, c1), Add (Mulext (f2, c2), c3)) when c1 = c2 ->
            Add (Mulext (f1 +. f2, c1), c3)

     end
   | Mul of complex * complex
     begin
(*
     These rules are now generated by the compiler.
       rule Mul (Opp x, y) -> Opp (Mul (x, y))
       rule Mul (x, Opp y) -> Opp (Mul (x, y))
*)
       associative
       commutative
       neutral (One)
       absorbent (Zero)
       distributive (Add)
       inverse (Inv)

       rule Mul (I, I) -> Opp One

       rule Mul (Mulext (f1, c1), Mulext (f2, c2)) when c1 = c2 ->
            Mulext (f1 *. f2, Mul (c1, c2))
       rule Mul (Mulext (f1, c1), c2) -> Mulext (f1, Mul (c1, c2))
       rule Mul (c1, Mulext (f1, c2)) -> Mulext (f1, Mul (c1, c2))

     end
;;
